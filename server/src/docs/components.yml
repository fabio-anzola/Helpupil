components:
  schemas:
    Document:
      type: object
      properties:
        purchasedDocuments:
          type: array
          items: 
            type: string
        reviewer:
          type: array
          items: 
            type: string
        name:
          type: string
        type:
          type: string
          enum: [homework, exam, test, revision, script]
        user:
          type: string
        rating:
          type: number
        file:
          type: object
          properties:
            fieldname:
              type: string
            originalname:
              type: string
            encoding:
              type: string
              enum: [7bit]
            mimetype:
              type: string
              enum: [application/pdf, image/png, image/jpg]
            destination:
              type: string
              enum: [uploads]
            filename:
              type: string
            path:
              type: string
            size:
              type: number
            wallet:
              type: number
        status:
          type: string
          enum: [approved, pending, declined]
        subject:
          type: string
        teacher:
          type: string
        price:
          type: number
      example:
        reviewer: [
          "607d93b3ab9fe96585327a8d",
          "6077fdad1d54bb0c4fd573f2",
          "60795e84cb8cce353c356658"
        ]
        name: SEW
        type: test
        user: 6077fdad1d54bb0c4fd573f2
        rating: 0
        file: 
          fieldname: file,
          originalname: Anschreiben.pdf,
          encoding: 7bit,
          mimetype: application/pdf,
          destination: uploads,
          filename: Anschreiben.pdf,
          path: uploads/Anschreiben.pdf,
          size: 444018
        status: pending
        subject: 60833a0fdefaa30582041ea7
        teacher: 608c81ec640bb32f5ce13552
        price: 5
        
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    Subject:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        shortname:
          type: string
        description:
          type: string
      example:
        id: 60833a0fdefaa30582041ea7
        name: Math
        shortname: M
        description: Subject of Math

    Teacher:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        shortname:
          type: string
        description:
          type: string
      example:
        id: 608c81ec640bb32f5ce13552
        name: Max Mustermann
        shortname: MUS
        description: Teacher MUS @ HTL3R

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    FieldNotFilled:
      description: Field has not been filled
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: <Field> is required

    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken

    DuplicateSubject:
      description: Name or shortname already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Name or shortname already taken

    DuplicateTeacher:
      description: Name or shortname already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Name or shortname already taken

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

    Credits:
      description: Not enough credits
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 402
            message: Not enough coins

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
